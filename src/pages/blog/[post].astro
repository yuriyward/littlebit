---
import type { CollectionEntry } from "astro:content";
import { getCollection, render } from "astro:content";
import { giscus } from "spectre:globals";

import type { GetStaticPaths } from "astro";
import Card from "../../components/Card.astro";
import Icon from "../../components/Icon.astro";
import ImageGlow from "../../components/ImageGlow.astro";
import Link from "../../components/Link.astro";
import Layout from "../../layouts/Layout.astro";

/**
 * Estimates the time it takes to read a post in minutes based on:
 * - A reading speed of 200 words per minute
 * - 10 seconds per image
 * - 20 seconds per code block
 *
 * @param post The post to estimate the reading time for
 */
function timeToRead(post: CollectionEntry<"posts">): number {
  const numWords = (post.body || "")
    .replace(/.*\[(.*?)\].*/gm, "$1")
    .replace(/```.*?```/gms, "")
    .split(/\s+/).length;

  const numImages = post.body?.match(/!\[/g)?.length || 0;
  const numCodeblocks = post.body?.match(/```/g)?.length || 0;

  return Math.ceil(numWords / 200) + Math.ceil(numImages / 6) + Math.ceil(numCodeblocks / 3);
}

interface Props {
  post: CollectionEntry<"posts">;
}

const { post } = Astro.props;

export const getStaticPaths = (async () => {
  const posts = await getCollection("posts", (post) => post.data.draft !== true);

  return posts.map((post) => ({ params: { post: post.id }, props: { post } }));
}) satisfies GetStaticPaths;

const { Content, headings } = await render(post);
---

<Layout
  title={post.data.title}
  description={post.data.description}
  image={post.data.image}
  article={{
    createdAt: post.data.createdAt,
    updatedAt: post.data.updatedAt,
  }}
>
  <div class="h-full relative" slot="left">
    <Card class="min-w-0 sticky top-8">
      <h2 class="mt-0">On this page</h2>
      <ol class="p-0 flex flex-col gap-2 mb-0 list-none relative">
        <li>
          <a href={`#_top`} class="text-muted-foreground text-sm py-1 px-2 rounded-sm transition-colors duration-150 hover:text-accent-foreground hover:bg-accent toc-link !no-underline decoration-clone">{post.data.title}</a>
        </li>
        {headings.map((heading, i) => (
          <li class={heading.depth === 3 ? 'ml-4' : heading.depth === 4 ? 'ml-8' : ''} data-depth={heading.depth}>
            <a href={`#${heading.slug}`} class="text-muted-foreground text-sm py-1 px-2 rounded-sm transition-colors duration-150 hover:text-accent-foreground hover:bg-accent toc-link !no-underline decoration-clone">{heading.text}</a>
          </li>
        ))}
      </ol>
      <hr class="mt-4 mb-2 w-full h-px bg-border border-none" />
      <Link
        href="/blog"
        variant="link"
        class="w-full flex items-center justify-start px-3 py-2 rounded-md text-sm font-medium font-mono text-foreground/80 hover:text-foreground hover:bg-accent/80 focus-visible:bg-accent focus-visible:text-accent-foreground focus-visible:outline-none transition-all duration-200"
        data-pagefind-ignore
        aria-label="View all blog posts"
      >
        All posts
      </Link>
    </Card>
  </div>
  <article slot="right" data-pagefind-body class="flex flex-col gap-8 leading-relaxed min-w-0 sm:gap-4">
    <Card>
      <div class="relative w-full h-fit" style="scroll-margin-top: 2rem;" id="_top" data-pagefind-ignore>
        <ImageGlow quality={100} class="w-full h-auto z-10" src={post.data.image} alt={post.data.title} />
        <div class="flex flex-col gap-2 absolute bottom-6 left-4 max-w-[calc(100%-3rem)] z-20 sm:relative sm:bottom-0 sm:left-0 sm:w-fit sm:max-w-none sm:mt-4">
          <div>
            <h1 class="mt-0 text-2xl bg-white text-black inline relative leading-tight mb-0 px-3 py-1 sm:inline sm:bg-transparent sm:p-0 sm:text-foreground" style="box-decoration-break: clone; -webkit-box-decoration-break: clone;">{post.data.title}</h1>
          </div>
          <div class="flex flex-row gap-2 bg-accent-foreground text-accent w-fit px-3 sm:block sm:bg-transparent sm:p-0 sm:text-foreground font-mono" style="box-decoration-break: clone; -webkit-box-decoration-break: clone;">
            <span>{post.data.createdAt.toLocaleDateString()}</span>
            <span>/</span>
            <span>{timeToRead(post)} minute{timeToRead(post) === 1 ? "" : "s"} to read</span>
            <span>/</span>
            <span>Tags: {post.data.tags.map((tag) => tag.id).join(", ")}</span>
          </div>
        </div>
      </div>
      <Content />
      <hr class="mt-4 mb-6 w-full h-px bg-border border-none" />
      <Link href="/blog" variant="ghost" data-pagefind-ignore>‚Üê Back to blog</Link>
    </Card>
    {giscus && (
      <Card>
        <div class="comments" data-pagefind-ignore>
          <script
            is:inline
            src="https://giscus.app/client.js"
            data-repo={giscus.repository}
            data-repo-id={giscus.repositoryId}
            data-category={giscus.category}
            data-category-id={giscus.categoryId}
            data-mapping={giscus.mapping}
            data-strict={giscus.strict === true ? "1" : "0"}
            data-reactions-enabled={giscus.reactionsEnabled === true ? "1" : "0"}
            data-emit-metadata={giscus.emitMetadata === true ? "1" : "0"}
            data-input-position={giscus.commentsInput}
            data-theme={giscus.theme || `${Astro.url.origin}/styles/giscus`}
            data-lang={giscus.lang}
            data-loading="lazy"
            crossorigin="anonymous"
            async
          />
        </div>
      </Card>
    )}
  </article>
</Layout>
<script src="../../scripts/toc.ts" />
<script src="../../scripts/heading-links.ts" />
<script>
  // Add external link icons and target="_blank" to external links in article content
  document.addEventListener('DOMContentLoaded', () => {
    const article = document.querySelector('article[data-pagefind-body]');
    if (!article) return;

    const links = article.querySelectorAll('a:not([class])');
    links.forEach(link => {
      const href = link.getAttribute('href');
      if (!href) return;

      // Check if it's an external link
      const isExternal = href.startsWith('http://') || href.startsWith('https://');
      const isCurrentDomain = href.includes(window.location.hostname);

      if (isExternal && !isCurrentDomain) {
        link.setAttribute('target', '_blank');
        link.setAttribute('rel', 'noopener noreferrer');
      }
    });
  });
</script>
