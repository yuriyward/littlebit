---
import Card from "../../components/Card.astro";
import Layout from "../../layouts/Layout.astro";
import Link from "../../components/Link.astro";

import type { GetStaticPaths } from "astro";
import type { CollectionEntry } from "astro:content";
import { render } from "astro:content";
import { getCollection } from "astro:content";
import ImageGlow from "../../components/ImageGlow.astro";
import Icon from "../../components/Icon.astro";

interface Props {
  project: CollectionEntry<'projects'>;
}

const { project } = Astro.props;

export const getStaticPaths = (async () => {
  const projects = await getCollection('projects');

  return projects.map((project) => ({ params: { project: project.id }, props: { project } }));
}) satisfies GetStaticPaths;

console.log(project.data.info);

const { Content } = await render(project);
---
<Layout
  title={project.data.title}
  description={project.data.description}
  image={project.data.image}
  article={{
    createdAt: project.data.date,
  }}
>
  <div class="h-full relative" slot="left">
    <Card class="min-w-0 sticky top-8">
      <h2 class="mt-0">Info</h2>
      <ul class="list-none p-0 m-0">
        {project.data.info.map((info) => {
          const Tag = info.link ? 'a' : 'div';
          return (
            <li class="flex flex-row items-center gap-3 mb-3 last:mb-0">
              <Tag href={info.link} class='flex items-center gap-4'>
                <Icon type={info.icon.type} name={info.icon.name as any} width={24} height={24} class='text-muted-foreground' />
                <span>{info.text}</span>
              </Tag>
            </li>
          )
        })}
      </ul>
    </Card>
  </div>
  <article slot="right" data-pagefind-body class="flex flex-col gap-8 leading-relaxed min-w-0 sm:gap-4">
    <Card>
      <div class="relative w-full h-fit" style="scroll-margin-top: 2rem;" id="_top" data-pagefind-ignore>
        {project.data.image && <ImageGlow quality={100} class="w-full h-auto z-10" src={project.data.image} alt={project.data.title} />}
        <div class="flex flex-col gap-2 absolute bottom-6 left-4 max-w-[calc(100%-3rem)] z-20 sm:relative sm:bottom-0 sm:left-0 sm:w-fit sm:max-w-none sm:mt-4">
          <div>
            <h1 class="mt-0 text-2xl bg-white text-black inline relative leading-tight mb-0 px-3 py-1 sm:inline sm:bg-transparent sm:p-0 sm:text-foreground" style="box-decoration-break: clone; -webkit-box-decoration-break: clone;">{project.data.title}</h1>
          </div>
          <div class="flex flex-row gap-2 bg-accent-foreground text-accent w-fit px-3 sm:block sm:bg-transparent sm:p-0 sm:text-foreground" style="font-family: 'Geist Mono', monospace; box-decoration-break: clone; -webkit-box-decoration-break: clone;">
            <span>{project.data.date.toLocaleDateString()}</span>
          </div>
        </div>
      </div>
      <Content />
      <hr class="mt-4 mb-6 w-full h-px bg-border border-none" />
      <Link href="/projects" variant="ghost" data-pagefind-ignore>‚Üê Back to projects</Link>
    </Card>
  </article>
</Layout>
<script>
  // Add external link icons and target="_blank" to external links in article content
  document.addEventListener('DOMContentLoaded', () => {
    const article = document.querySelector('article[data-pagefind-body]');
    if (!article) return;

    const links = article.querySelectorAll('a:not([class])');
    links.forEach(link => {
      const href = link.getAttribute('href');
      if (!href) return;

      // Check if it's an external link
      const isExternal = href.startsWith('http://') || href.startsWith('https://');
      const isCurrentDomain = href.includes(window.location.hostname);

      if (isExternal && !isCurrentDomain) {
        link.setAttribute('target', '_blank');
        link.setAttribute('rel', 'noopener noreferrer');
      }
    });
  });
</script>
