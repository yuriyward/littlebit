---
import { getIconData, iconToSVG, replaceIDs } from "@iconify/utils";
import { icons as lucideIconsJSON } from "@iconify-json/lucide";
import type { icons as lucideIcons } from "@iconify-json/lucide/icons.json";
import { icons as simpleIconsJSON } from "@iconify-json/simple-icons";
import type { icons as simpleIcons } from "@iconify-json/simple-icons/icons.json";
import { AstroError } from "astro/errors";
import type { HTMLAttributes } from "astro/types";

interface SVGAttributes extends HTMLAttributes<"svg"> {
  // biome-ignore lint/suspicious/noExplicitAny: Allow any string index
  [key: string]: any;
}

interface LucideProps extends HTMLAttributes<"svg"> {
  type: "lucide";
  name: keyof typeof lucideIcons;
}

interface SimpleIconsProps extends HTMLAttributes<"svg"> {
  type: "simple-icons";
  name: keyof typeof simpleIcons;
}

type Props = LucideProps | SimpleIconsProps;

const { type, name, ...props } = Astro.props;
const attributes = props as SVGAttributes;

if (type !== "lucide" && type !== "simple-icons") {
  throw new AstroError(`Invalid icon type "${type}"`);
}

// biome-ignore lint/suspicious/noExplicitAny: Needed type not exported
let iconData: any;

if (type === "lucide") {
  iconData = getIconData(lucideIconsJSON, name);
} else {
  iconData = getIconData(simpleIconsJSON, name);
}

if (!iconData) {
  throw new AstroError(`Icon "${name}" is missing`);
}

const renderData = iconToSVG(iconData, {
  height: attributes.height || 24,
  width: attributes.width || 24,
});

const body = replaceIDs(renderData.body);

let renderAttribsHTML = body.indexOf("xlink:") === -1 ? "" : ' xmlns:xlink="http://www.w3.org/1999/xlink"';

// Apply attributes generated by iconToSVG first (includes critical attributes like viewBox)
const generatedAttributes = renderData.attributes as Record<string, string | number | undefined>;
for (const attr in generatedAttributes) {
  const value = generatedAttributes[attr];
  if (value !== undefined) {
    renderAttribsHTML += ` ${attr}="${value}"`;
  }
}

// Then apply any consumer-provided attributes to allow overrides
for (const attr in attributes) {
  renderAttribsHTML += ` ${attr}="${attributes[attr]}"`;
}

const svg = `<svg xmlns="http://www.w3.org/2000/svg"${renderAttribsHTML}>${body}</svg>`;
---

<Fragment set:html={svg} />
