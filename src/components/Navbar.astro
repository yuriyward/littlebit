---
import Icon from "./Icon.astro";
import { InputWrapper } from "./InputWrapper";
import { ButtonWrapper } from "./ButtonWrapper";
import Link from "./Link.astro";
import { name } from 'spectre:globals';

const path = Astro.url.pathname;
---
<nav class="flex justify-between items-center font-mono z-50 py-4 px-6 bg-card/80 backdrop-blur-sm border-b border-border/50 max-sm:px-4 max-sm:pt-4 max-sm:pb-2 max-sm:transition-all max-sm:duration-300">
  <Link href="/" class="font-bold no-underline text-xl z-[2] hover:text-accent transition-colors duration-200" variant="link">{name}</Link>

  <div class="flex items-center gap-6 max-sm:hidden">
    <ul class="flex items-center gap-1 m-0 p-0 list-none">
      <li>
        <Link href="/blog" class="nav-link" class:list={{ active: path.startsWith('/blog') }} variant="link">Blog</Link>
      </li>
      <li class="text-muted-foreground mx-2">/</li>
      <li>
        <Link href="/projects" class="nav-link" class:list={{ active: path.startsWith('/projects') }} variant="link">Projects</Link>
      </li>
    </ul>

    <div class="relative">
      <InputWrapper
        id="search"
        type="text"
        placeholder="Search (Ctrl+K)"
        className="w-48 h-8 pl-3 pr-8 bg-muted/50 border border-border/50 rounded-md text-sm placeholder:text-muted-foreground focus:bg-background focus:border-accent focus:ring-1 focus:ring-accent/50 transition-all duration-200"
        client:load
      />
      <div class="absolute right-2 top-1/2 -translate-y-1/2 text-muted-foreground pointer-events-none">
        <Icon type="lucide" name="search" width={14} height={14} />
      </div>
      <div id="search-results" class="absolute hidden z-50 mt-2 p-1 bg-popover border border-border rounded-lg shadow-lg w-96 right-0 max-h-96 overflow-y-auto"></div>
    </div>
  </div>

  <!-- Mobile Navigation -->
  <div class="hidden max-sm:flex items-center gap-4">
    <div class="relative">
      <InputWrapper
        id="search-mobile"
        type="text"
        placeholder="Search"
        className="w-28 h-7 text-xs bg-muted/50 border border-border/50 rounded-md focus:w-36 transition-all duration-200"
        client:load
      />
    </div>
    <ButtonWrapper className="h-8 w-8 mobile-nav-toggle rounded-md" client:load>
      <Icon type="lucide" name="menu" width={18} height={18} class="menu-closed" />
      <Icon type="lucide" name="x" width={18} height={18} class="menu-open hidden" />
    </ButtonWrapper>
  </div>

  <!-- Mobile Menu Overlay -->
  <ul class="hidden max-sm:flex max-sm:flex-col max-sm:gap-0 max-sm:absolute max-sm:w-full max-sm:top-full max-sm:left-0 max-sm:bg-card/95 max-sm:backdrop-blur-md max-sm:border-b max-sm:border-border/50 max-sm:z-[1] max-sm:opacity-0 max-sm:pointer-events-none max-sm:transition-all max-sm:duration-300 max-sm:transform max-sm:translate-y-[-10px]">
    <li class="border-b border-border/30">
      <Link href="/blog" class="mobile-nav-link" class:list={{ active: path.startsWith('/blog') }} variant="link">Blog</Link>
    </li>
    <li class="border-b border-border/30">
      <Link href="/projects" class="mobile-nav-link" class:list={{ active: path.startsWith('/projects') }} variant="link">Projects</Link>
    </li>
  </ul>
</nav>
<script is:inline>
  const searchElement = document.querySelector('#search');
  const results = document.querySelector('#search-results');
  const navToggle = document.querySelector('.mobile-nav-toggle');

  let focusIndex = -1;

  document.addEventListener('keydown', (e) => {
    if (e.key === 'k' && e.ctrlKey) {
      searchElement.focus();
    }

    if (e.key === 'Escape') {
      searchElement.blur();
      results.classList.remove('active');
      focusIndex = -1;
    }

    if (e.key === 'ArrowDown') {
      e.preventDefault();

      focusIndex++;
      const results = document.querySelectorAll('#search-results a');

      if (focusIndex >= results.length) {
        focusIndex = 0;
      }

      results[focusIndex]?.focus();
    }

    if (e.key === 'ArrowUp') {
      e.preventDefault();

      focusIndex--;
      const results = document.querySelectorAll('#search-results a');

      if (focusIndex < 0) {
        focusIndex = results.length - 1;
      }

      results[focusIndex]?.focus();
    }
  });

  let pagefindInitialized = false;

  searchElement?.addEventListener('focus', async () => {
    searchElement.placeholder = '';
    results.classList.add('active');

    // initialize pagefind on first focus
    if (!pagefindInitialized) {
      try {
        window.pagefind = await import("/pagefind/pagefind.js");
        await window.pagefind.init();
        pagefindInitialized = true;
      } catch (error) {
        console.error('Failed to initialize Pagefind:', error);
      }
    }
  });

  searchElement?.addEventListener('blur', () => {
    handleTabletChange();
    setTimeout(() => {
      if (!document.activeElement?.closest('#search-results')) {
        results.classList.remove('active');
        focusIndex = -1;
      }
    }, 1);
  });

  results?.addEventListener('focusout', (e) => {
    if (!e.relatedTarget?.closest('#search-results')) {
      results.classList.remove('active');
      focusIndex = -1;
    }
  });

  searchElement?.addEventListener('input', async (e) => {
    // only search if Pagefind is ready
    if (!pagefindInitialized) {
      return;
    }

    results.innerHTML = '';
    let searchResultHtml = '';

    const search = await window.pagefind.search(e.target.value);

    let i = 0;
    for (const result of search.results) {
      i++;

      const data = await result.data();

      searchResultHtml += `
        <a href="${data.url}">
          <h3 class="mt-0">${data.meta.title}</h3>
          <p>${data.excerpt}</p>
        </a>
        ${i < search.results.length ? '<hr class="separator">' : ''}
      `;
    }

    if (search.results.length === 0 && e.target.value.length > 0) {
      results.innerHTML = '<p class="mt-0">No results found</p>';
    } else {
      results.innerHTML = searchResultHtml;
    }

    results.classList.add('active');
  });

  navToggle?.addEventListener('click', () => {
    navToggle.classList.toggle('active');
    document.querySelector('nav').classList.toggle('active');
  });

  const handleTabletChange = () => {
    if (window.matchMedia('(max-width: 640px)').matches) {
      searchElement.placeholder = 'Search';
    } else {
      searchElement.placeholder = 'Search (Ctrl+K)';
    }
  }

  document.addEventListener('DOMContentLoaded', handleTabletChange);
  document.addEventListener('resize', handleTabletChange);
</script>
<style>
  @reference "../styles/global.css";

  /* Navigation link styles */
  .nav-link {
    @apply px-3 py-2 rounded-md text-sm font-medium text-foreground/80 hover:text-foreground hover:bg-accent/80 focus-visible:bg-accent focus-visible:text-accent-foreground focus-visible:outline-none transition-all duration-200;
  }

  .nav-link.active {
    @apply bg-accent text-accent-foreground;
  }

  /* Mobile navigation link styles */
  .mobile-nav-link {
    @apply block px-6 py-4 text-foreground/80 hover:text-foreground hover:bg-accent/20 focus-visible:bg-accent focus-visible:text-accent-foreground focus-visible:outline-none transition-all duration-200;
  }

  .mobile-nav-link.active {
    @apply bg-accent/20 text-accent-foreground border-l-4 border-accent;
  }

  /* Search results show/hide */
  #search-results.active:has(*) {
    @apply block;
  }

  /* Mobile menu toggle states */
  .mobile-nav-toggle.active .menu-open {
    @apply flex;
  }

  .mobile-nav-toggle.active .menu-closed {
    @apply hidden;
  }

  /* Mobile navigation active states */
  nav.active ul {
    @apply opacity-100 pointer-events-auto translate-y-0;
  }
</style>
<style is:global>
  @reference "../styles/global.css";

  /* Search results styling */
  #search-results a {
    @apply block no-underline text-foreground p-3 rounded-md hover:bg-accent/80 hover:text-accent-foreground focus-visible:bg-accent focus-visible:text-accent-foreground focus-visible:outline-none transition-all duration-200;
  }

  #search-results a:hover mark,
  #search-results a:focus-visible mark {
    @apply bg-accent-foreground text-accent;
  }

  #search-results a h3 {
    @apply mb-1 font-medium text-sm;
  }

  #search-results a p {
    @apply line-clamp-2 text-xs text-muted-foreground;
  }

  #search-results mark {
    @apply bg-accent/30 text-accent-foreground rounded px-1;
  }

  .separator {
    @apply my-1 mx-3 border-none h-px bg-border/30;
  }
</style>
