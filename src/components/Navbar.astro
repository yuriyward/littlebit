---
import Icon from "./Icon.astro";
import { name } from 'spectre:globals';

const path = Astro.url.pathname;
---
<nav>
  <a class="site-title" href="/">{name}</a>
  <ul>
    <li>
      <a href="/blog" class:list={{ active: path.startsWith('/blog') }}>Blog</a>
    </li>
    <li class="nav-separator">/</li>
    <li>
      <a href="/projects" class:list={{ active: path.startsWith('/projects') }}>Projects</a>
    </li>
    <li class="nav-separator">/</li>
    <li>
      <input id="search" type="text" placeholder="Search (Ctrl+K)" />
      <div id="search-results"></div>
    </li>
  </ul>
  <button class="mobile-nav-toggle">
    <Icon type="lucide" name="menu" width={24} height={24} class="menu-closed" />
    <Icon type="lucide" name="x" width={24} height={24} class="menu-open" />
  </button>
</nav>
<script is:inline>
  const searchElement = document.querySelector('#search');
  const results = document.querySelector('#search-results');
  const navToggle = document.querySelector('.mobile-nav-toggle');

  let focusIndex = -1;

  document.addEventListener('keydown', (e) => {
    if (e.key === 'k' && e.ctrlKey) {
      searchElement.focus();
    }

    if (e.key === 'Escape') {
      searchElement.blur();
      results.classList.remove('active');
      focusIndex = -1;
    }

    if (e.key === 'ArrowDown') {
      e.preventDefault();

      focusIndex++;
      const results = document.querySelectorAll('#search-results a');

      if (focusIndex >= results.length) {
        focusIndex = 0;
      }

      results[focusIndex]?.focus();
    }

    if (e.key === 'ArrowUp') {
      e.preventDefault();

      focusIndex--;
      const results = document.querySelectorAll('#search-results a');

      if (focusIndex < 0) {
        focusIndex = results.length - 1;
      }

      results[focusIndex]?.focus();
    }
  });

  let pagefindInitialized = false;

  searchElement?.addEventListener('focus', async () => {
    searchElement.placeholder = '';
    results.classList.add('active');

    // initialize pagefind on first focus
    if (!pagefindInitialized) {
      try {
        window.pagefind = await import("/pagefind/pagefind.js");
        await window.pagefind.init();
        pagefindInitialized = true;
      } catch (error) {
        console.error('Failed to initialize Pagefind:', error);
      }
    }
  });

  searchElement?.addEventListener('blur', () => {
    handleTabletChange();
    setTimeout(() => {
      if (!document.activeElement?.closest('#search-results')) {
        results.classList.remove('active');
        focusIndex = -1;
      }
    }, 1);
  });

  results?.addEventListener('focusout', (e) => {
    if (!e.relatedTarget?.closest('#search-results')) {
      results.classList.remove('active');
      focusIndex = -1;
    }
  });

  searchElement?.addEventListener('input', async (e) => {
    // only search if Pagefind is ready
    if (!pagefindInitialized) {
      return;
    }

    results.innerHTML = '';
    let searchResultHtml = '';

    const search = await window.pagefind.search(e.target.value);

    let i = 0;
    for (const result of search.results) {
      i++;

      const data = await result.data();

      searchResultHtml += `
        <a href="${data.url}">
          <h3 class="no-mt">${data.meta.title}</h3>
          <p>${data.excerpt}</p>
        </a>
        ${i < search.results.length ? '<hr class="separator">' : ''}
      `;
    }

    if (search.results.length === 0 && e.target.value.length > 0) {
      results.innerHTML = '<p style="margin-top: 0;">No results found</p>';
    } else {
      results.innerHTML = searchResultHtml;
    }

    results.classList.add('active');
  });

  navToggle?.addEventListener('click', () => {
    navToggle.classList.toggle('active');
    document.querySelector('nav').classList.toggle('active');
  });

  const handleTabletChange = () => {
    if (window.matchMedia('(max-width: 640px)').matches) {
      searchElement.placeholder = 'Search';
    } else {
      searchElement.placeholder = 'Search (Ctrl+K)';
    }
  }

  document.addEventListener('DOMContentLoaded', handleTabletChange);
  document.addEventListener('resize', handleTabletChange);
</script>
<style>
  @reference "../styles/global.css";
  nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-family: 'Geist Mono', monospace;
    z-index: 50;
  }

  .site-title {
    font-weight: 800;
    text-decoration: none;
    font-size: 1.25em;
    z-index: 2;
  }

  nav ul {
    display: flex;
    gap: 1rem;
    margin: 0;
    padding: 0;
    list-style-type: none;
    align-items: center;
  }

  nav ul li {
    position: relative;
  }

  nav a {
    @apply text-inherit no-underline py-1 px-2;
  }

  nav a:hover, nav a:focus-visible, nav a.active {
    @apply bg-primary outline-none;
  }

  #search {
    background: none;
    border: none;
    outline: none;
    padding: .25rem .5rem;
    width: 160px;
  }

  #search::placeholder {
    @apply text-foreground;
  }

  #search:focus {
    @apply bg-primary;
  }

  #search-results {
    @apply absolute hidden z-10 p-2 bg-muted border border-primary;
    top: calc(100% + .5rem);
    right: 0;
    width: 200%;
  }

  #search-results.active:has(*) {
    display: block;
  }

  .mobile-nav-toggle {
    @apply hidden w-10 h-10 bg-card border border-border items-center justify-center cursor-pointer z-20;
  }

  .menu-open {
    display: none;
  }

  .mobile-nav-toggle.active .menu-open {
    display: flex;
  }

  .mobile-nav-toggle.active .menu-closed {
    display: none;
  }

  @media screen and (max-width: 640px) {
    nav {
      padding: 0 1rem;
      padding-top: 1rem;
      transition: all .25s ease;
    }

    .mobile-nav-toggle {
      display: flex;
    }

    .nav-separator {
      display: none;
    }

    nav ul {
      flex-direction: column;
      gap: 0;
      position: absolute;
      width: 100%;
      top: calc(1rem + 40px);
      right: 0;
      padding: 1rem;
      z-index: 1;
      opacity: 0;
      pointer-events: none;
      transition: all .25s ease;
      user-select: none;
      height: calc(100vh - 1rem - 40px);
      align-items: start;
    }

    nav.active {
      @apply bg-secondary;
    }

    nav.active ul {
      @apply opacity-100 pointer-events-auto bg-secondary;
    }

    nav ul li {
      @apply relative transition-all duration-300 ease-out w-full max-w-none p-0 text-lg border-b border-border;
      top: -1.5rem;
    }

    nav ul li a {
      display: block;
      padding: .75rem 0;
      width: 100%;
      padding-left: 1rem;
    }

    nav ul li:first-child {
      @apply border-t border-border;
    }

    nav.active ul li {
      top: 0;
    }

    #search {
      width: 100%;
      max-width: none;
      padding: .75rem 1rem;
    }

    #search-results {
      width: 100%;
      top: 100%;
      font-size: 0.875em;
    }
  }
</style>
<style is:global>
  @reference "../styles/global.css";
  #search-results a {
    @apply block no-underline text-foreground p-2;
  }

  #search-results a:hover, #search-results a:focus-visible {
    @apply bg-primary outline-none;
  }

  #search-results a:hover mark, #search-results a:focus-visible mark {
    @apply bg-white text-black;
  }

  #search-results a h3 {
    margin-bottom: .5rem;
  }

  #search-results a p {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  #search-results mark {
    @apply bg-primary text-foreground;
  }

  .separator {
    @apply my-2 mx-2 border-none h-px bg-border;
  }
</style>
